//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IAuctionProjectService")]
    public interface AuctionProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByIdResponse")]
        Core.Account GetAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<Core.Account> GetAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/HashAndSaltPassword", ReplyAction="http://tempuri.org/IAuctionProjectService/HashAndSaltPasswordResponse")]
        Core.Account HashAndSaltPassword(Core.Account acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/HashAndSaltPassword", ReplyAction="http://tempuri.org/IAuctionProjectService/HashAndSaltPasswordResponse")]
        System.Threading.Tasks.Task<Core.Account> HashAndSaltPasswordAsync(Core.Account acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/Login", ReplyAction="http://tempuri.org/IAuctionProjectService/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/Login", ReplyAction="http://tempuri.org/IAuctionProjectService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAccountResponse")]
        int AddAccount(Core.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAccountResponse")]
        System.Threading.Tasks.Task<int> AddAccountAsync(Core.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAccounts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAccountsResponse")]
        Core.Account[] GetAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAccounts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAccountsResponse")]
        System.Threading.Tasks.Task<Core.Account[]> GetAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountResponse")]
        void RemoveAccount(Core.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountResponse")]
        System.Threading.Tasks.Task RemoveAccountAsync(Core.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountByIdResponse")]
        int RemoveAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAccountResponse")]
        int UpdateAccount(Core.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAccountResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountAsync(Core.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByUsername", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByUsernameResponse")]
        Core.Account GetAccountByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByUsername", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByUsernameResponse")]
        System.Threading.Tasks.Task<Core.Account> GetAccountByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByEmail", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByEmailResponse")]
        Core.Account GetAccountByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByEmail", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByEmailResponse")]
        System.Threading.Tasks.Task<Core.Account> GetAccountByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountWithObjectsResponse")]
        Core.Account GetAccountWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountWithObjectsResponse")]
        System.Threading.Tasks.Task<Core.Account> GetAccountWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdResponse")]
        Core.Auction GetAuctionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdResponse")]
        System.Threading.Tasks.Task<Core.Auction> GetAuctionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAuctionResponse")]
        int AddAuction(Core.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAuctionResponse")]
        System.Threading.Tasks.Task<int> AddAuctionAsync(Core.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsResponse")]
        Core.Auction[] GetAllAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> GetAllAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjectsResponse")]
        Core.Auction[] GetAllAuctionsWithObjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjectsResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> GetAllAuctionsWithObjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionResponse")]
        void RemoveAuction(Core.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionResponse")]
        System.Threading.Tasks.Task RemoveAuctionAsync(Core.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionByIdResponse")]
        int RemoveAuctionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveAuctionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAuctionResponse")]
        int UpdateAuction(Core.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAuctionResponse")]
        System.Threading.Tasks.Task<int> UpdateAuctionAsync(Core.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductIdResponse")]
        Core.Auction GetAuctionWithProductId(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductIdResponse")]
        System.Threading.Tasks.Task<Core.Auction> GetAuctionWithProductIdAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/getAllAucionsForProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/getAllAucionsForProductsResponse")]
        Core.Auction[] getAllAucionsForProducts(Core.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/getAllAucionsForProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/getAllAucionsForProductsResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> getAllAucionsForProductsAsync(Core.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerIdResponse")]
        Core.Auction[] GetAuctionsWhereSellerId(int sellerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerIdResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> GetAuctionsWhereSellerIdAsync(int sellerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerIdResponse")]
        Core.Auction[] GetAuctionsWhereWinnerId(int winnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerIdResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> GetAuctionsWhereWinnerIdAsync(int winnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeft", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeftResponse")]
        Core.Auction[] GetAuctionsWithLessTimeLeft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeft", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeftResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> GetAuctionsWithLessTimeLeftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctionsResponse")]
        Core.Auction[] GetMostRecentAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctionsResponse")]
        System.Threading.Tasks.Task<Core.Auction[]> GetMostRecentAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjectsResponse")]
        Core.Auction GetAuctionByIdWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjectsResponse")]
        System.Threading.Tasks.Task<Core.Auction> GetAuctionByIdWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategorytById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategorytByIdResponse")]
        Core.Category GetCategorytById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategorytById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategorytByIdResponse")]
        System.Threading.Tasks.Task<Core.Category> GetCategorytByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/AddCategoryResponse")]
        int AddCategory(Core.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/AddCategoryResponse")]
        System.Threading.Tasks.Task<int> AddCategoryAsync(Core.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllCategories", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllCategoriesResponse")]
        Core.Category[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllCategories", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<Core.Category[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryResponse")]
        void RemoveCategory(Core.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryResponse")]
        System.Threading.Tasks.Task RemoveCategoryAsync(Core.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByIdResponse")]
        int RemoveCategoryById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveCategoryByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateCategoryResponse")]
        int UpdateCategory(Core.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(Core.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryByNameResponse")]
        Core.Category GetCategoryByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryByNameResponse")]
        System.Threading.Tasks.Task<Core.Category> GetCategoryByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByNameResponse")]
        int RemoveCategoryByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByNameResponse")]
        System.Threading.Tasks.Task<int> RemoveCategoryByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjectsResponse")]
        Core.Category GetCategoryWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjectsResponse")]
        System.Threading.Tasks.Task<Core.Category> GetCategoryWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidByIdResponse")]
        Core.Bid GetBidById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidByIdResponse")]
        System.Threading.Tasks.Task<Core.Bid> GetBidByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/CreateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/CreateBidResponse")]
        Core.Bid CreateBid(double price, int bidOwnerId, int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/CreateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/CreateBidResponse")]
        System.Threading.Tasks.Task<Core.Bid> CreateBidAsync(double price, int bidOwnerId, int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddBid", ReplyAction="http://tempuri.org/IAuctionProjectService/AddBidResponse")]
        int AddBid(Core.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddBid", ReplyAction="http://tempuri.org/IAuctionProjectService/AddBidResponse")]
        System.Threading.Tasks.Task<int> AddBidAsync(Core.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBids", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsResponse")]
        Core.Bid[] GetAllBids();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBids", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsResponse")]
        System.Threading.Tasks.Task<Core.Bid[]> GetAllBidsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBid", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidResponse")]
        void RemoveBid(Core.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBid", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidResponse")]
        System.Threading.Tasks.Task RemoveBidAsync(Core.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidByIdResponse")]
        int RemoveBidById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveBidByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateBidResponse")]
        int UpdateBid(Core.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateBidResponse")]
        System.Threading.Tasks.Task<int> UpdateBidAsync(Core.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountIdResponse")]
        Core.Bid[] GetAllBidsByAccountId(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountIdResponse")]
        System.Threading.Tasks.Task<Core.Bid[]> GetAllBidsByAccountIdAsync(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionIdResponse")]
        Core.Bid[] GetAllBidsByAuctionId(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionIdResponse")]
        System.Threading.Tasks.Task<Core.Bid[]> GetAllBidsByAuctionIdAsync(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsResponse")]
        Core.Bid GetBidWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsResponse")]
        System.Threading.Tasks.Task<Core.Bid> GetBidWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductByIdResponse")]
        Core.Product GetProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductByIdResponse")]
        System.Threading.Tasks.Task<Core.Product> GetProductByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategoryResponse")]
        Core.Product[] GetAllProductsInCategory(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategoryResponse")]
        System.Threading.Tasks.Task<Core.Product[]> GetAllProductsInCategoryAsync(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/AddProductResponse")]
        int AddProduct(Core.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(Core.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsResponse")]
        Core.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<Core.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductResponse")]
        void RemoveProduct(Core.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductResponse")]
        System.Threading.Tasks.Task RemoveProductAsync(Core.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductByIdResponse")]
        int RemoveProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveProductByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateProductResponse")]
        int UpdateProduct(Core.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(Core.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThanResponse")]
        Core.Product[] FindProductsWithPriceMoreThan(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThanResponse")]
        System.Threading.Tasks.Task<Core.Product[]> FindProductsWithPriceMoreThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithNameResponse")]
        Core.Product[] GetProductsWithName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithNameResponse")]
        System.Threading.Tasks.Task<Core.Product[]> GetProductsWithNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithDescription", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithDescriptionResponse")]
        Core.Product[] GetProductsWithDescription(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithDescription", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithDescriptionResponse")]
        System.Threading.Tasks.Task<Core.Product[]> GetProductsWithDescriptionAsync(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThanResponse")]
        Core.Product[] FindProductsWithPriceLessThan(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThanResponse")]
        System.Threading.Tasks.Task<Core.Product[]> FindProductsWithPriceLessThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductWithObjectsResponse")]
        Core.Product GetProductWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductWithObjectsResponse")]
        System.Threading.Tasks.Task<Core.Product> GetProductWithObjectsAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuctionProjectServiceChannel : ConsoleApplication1.ServiceReference1.AuctionProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuctionProjectServiceClient : System.ServiceModel.ClientBase<ConsoleApplication1.ServiceReference1.AuctionProjectService>, ConsoleApplication1.ServiceReference1.AuctionProjectService {
        
        public AuctionProjectServiceClient() {
        }
        
        public AuctionProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuctionProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Core.Account GetAccountById(int Id) {
            return base.Channel.GetAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Account> GetAccountByIdAsync(int Id) {
            return base.Channel.GetAccountByIdAsync(Id);
        }
        
        public Core.Account HashAndSaltPassword(Core.Account acc) {
            return base.Channel.HashAndSaltPassword(acc);
        }
        
        public System.Threading.Tasks.Task<Core.Account> HashAndSaltPasswordAsync(Core.Account acc) {
            return base.Channel.HashAndSaltPasswordAsync(acc);
        }
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public int AddAccount(Core.Account Account) {
            return base.Channel.AddAccount(Account);
        }
        
        public System.Threading.Tasks.Task<int> AddAccountAsync(Core.Account Account) {
            return base.Channel.AddAccountAsync(Account);
        }
        
        public Core.Account[] GetAllAccounts() {
            return base.Channel.GetAllAccounts();
        }
        
        public System.Threading.Tasks.Task<Core.Account[]> GetAllAccountsAsync() {
            return base.Channel.GetAllAccountsAsync();
        }
        
        public void RemoveAccount(Core.Account Account) {
            base.Channel.RemoveAccount(Account);
        }
        
        public System.Threading.Tasks.Task RemoveAccountAsync(Core.Account Account) {
            return base.Channel.RemoveAccountAsync(Account);
        }
        
        public int RemoveAccountById(int Id) {
            return base.Channel.RemoveAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAccountByIdAsync(int Id) {
            return base.Channel.RemoveAccountByIdAsync(Id);
        }
        
        public int UpdateAccount(Core.Account Account) {
            return base.Channel.UpdateAccount(Account);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountAsync(Core.Account Account) {
            return base.Channel.UpdateAccountAsync(Account);
        }
        
        public Core.Account GetAccountByUsername(string username) {
            return base.Channel.GetAccountByUsername(username);
        }
        
        public System.Threading.Tasks.Task<Core.Account> GetAccountByUsernameAsync(string username) {
            return base.Channel.GetAccountByUsernameAsync(username);
        }
        
        public Core.Account GetAccountByEmail(string email) {
            return base.Channel.GetAccountByEmail(email);
        }
        
        public System.Threading.Tasks.Task<Core.Account> GetAccountByEmailAsync(string email) {
            return base.Channel.GetAccountByEmailAsync(email);
        }
        
        public Core.Account GetAccountWithObjects(int Id) {
            return base.Channel.GetAccountWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Account> GetAccountWithObjectsAsync(int Id) {
            return base.Channel.GetAccountWithObjectsAsync(Id);
        }
        
        public Core.Auction GetAuctionById(int Id) {
            return base.Channel.GetAuctionById(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Auction> GetAuctionByIdAsync(int Id) {
            return base.Channel.GetAuctionByIdAsync(Id);
        }
        
        public int AddAuction(Core.Auction Auction) {
            return base.Channel.AddAuction(Auction);
        }
        
        public System.Threading.Tasks.Task<int> AddAuctionAsync(Core.Auction Auction) {
            return base.Channel.AddAuctionAsync(Auction);
        }
        
        public Core.Auction[] GetAllAuctions() {
            return base.Channel.GetAllAuctions();
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> GetAllAuctionsAsync() {
            return base.Channel.GetAllAuctionsAsync();
        }
        
        public Core.Auction[] GetAllAuctionsWithObjects() {
            return base.Channel.GetAllAuctionsWithObjects();
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> GetAllAuctionsWithObjectsAsync() {
            return base.Channel.GetAllAuctionsWithObjectsAsync();
        }
        
        public void RemoveAuction(Core.Auction Auction) {
            base.Channel.RemoveAuction(Auction);
        }
        
        public System.Threading.Tasks.Task RemoveAuctionAsync(Core.Auction Auction) {
            return base.Channel.RemoveAuctionAsync(Auction);
        }
        
        public int RemoveAuctionById(int Id) {
            return base.Channel.RemoveAuctionById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAuctionByIdAsync(int Id) {
            return base.Channel.RemoveAuctionByIdAsync(Id);
        }
        
        public int UpdateAuction(Core.Auction Auction) {
            return base.Channel.UpdateAuction(Auction);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAuctionAsync(Core.Auction Auction) {
            return base.Channel.UpdateAuctionAsync(Auction);
        }
        
        public Core.Auction GetAuctionWithProductId(int productId) {
            return base.Channel.GetAuctionWithProductId(productId);
        }
        
        public System.Threading.Tasks.Task<Core.Auction> GetAuctionWithProductIdAsync(int productId) {
            return base.Channel.GetAuctionWithProductIdAsync(productId);
        }
        
        public Core.Auction[] getAllAucionsForProducts(Core.Product[] products) {
            return base.Channel.getAllAucionsForProducts(products);
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> getAllAucionsForProductsAsync(Core.Product[] products) {
            return base.Channel.getAllAucionsForProductsAsync(products);
        }
        
        public Core.Auction[] GetAuctionsWhereSellerId(int sellerId) {
            return base.Channel.GetAuctionsWhereSellerId(sellerId);
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> GetAuctionsWhereSellerIdAsync(int sellerId) {
            return base.Channel.GetAuctionsWhereSellerIdAsync(sellerId);
        }
        
        public Core.Auction[] GetAuctionsWhereWinnerId(int winnerId) {
            return base.Channel.GetAuctionsWhereWinnerId(winnerId);
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> GetAuctionsWhereWinnerIdAsync(int winnerId) {
            return base.Channel.GetAuctionsWhereWinnerIdAsync(winnerId);
        }
        
        public Core.Auction[] GetAuctionsWithLessTimeLeft() {
            return base.Channel.GetAuctionsWithLessTimeLeft();
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> GetAuctionsWithLessTimeLeftAsync() {
            return base.Channel.GetAuctionsWithLessTimeLeftAsync();
        }
        
        public Core.Auction[] GetMostRecentAuctions() {
            return base.Channel.GetMostRecentAuctions();
        }
        
        public System.Threading.Tasks.Task<Core.Auction[]> GetMostRecentAuctionsAsync() {
            return base.Channel.GetMostRecentAuctionsAsync();
        }
        
        public Core.Auction GetAuctionByIdWithObjects(int Id) {
            return base.Channel.GetAuctionByIdWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Auction> GetAuctionByIdWithObjectsAsync(int Id) {
            return base.Channel.GetAuctionByIdWithObjectsAsync(Id);
        }
        
        public Core.Category GetCategorytById(int Id) {
            return base.Channel.GetCategorytById(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Category> GetCategorytByIdAsync(int Id) {
            return base.Channel.GetCategorytByIdAsync(Id);
        }
        
        public int AddCategory(Core.Category Category) {
            return base.Channel.AddCategory(Category);
        }
        
        public System.Threading.Tasks.Task<int> AddCategoryAsync(Core.Category Category) {
            return base.Channel.AddCategoryAsync(Category);
        }
        
        public Core.Category[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<Core.Category[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public void RemoveCategory(Core.Category Category) {
            base.Channel.RemoveCategory(Category);
        }
        
        public System.Threading.Tasks.Task RemoveCategoryAsync(Core.Category Category) {
            return base.Channel.RemoveCategoryAsync(Category);
        }
        
        public int RemoveCategoryById(int Id) {
            return base.Channel.RemoveCategoryById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCategoryByIdAsync(int Id) {
            return base.Channel.RemoveCategoryByIdAsync(Id);
        }
        
        public int UpdateCategory(Core.Category Category) {
            return base.Channel.UpdateCategory(Category);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(Core.Category Category) {
            return base.Channel.UpdateCategoryAsync(Category);
        }
        
        public Core.Category GetCategoryByName(string name) {
            return base.Channel.GetCategoryByName(name);
        }
        
        public System.Threading.Tasks.Task<Core.Category> GetCategoryByNameAsync(string name) {
            return base.Channel.GetCategoryByNameAsync(name);
        }
        
        public int RemoveCategoryByName(string name) {
            return base.Channel.RemoveCategoryByName(name);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCategoryByNameAsync(string name) {
            return base.Channel.RemoveCategoryByNameAsync(name);
        }
        
        public Core.Category GetCategoryWithObjects(int Id) {
            return base.Channel.GetCategoryWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Category> GetCategoryWithObjectsAsync(int Id) {
            return base.Channel.GetCategoryWithObjectsAsync(Id);
        }
        
        public Core.Bid GetBidById(int Id) {
            return base.Channel.GetBidById(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Bid> GetBidByIdAsync(int Id) {
            return base.Channel.GetBidByIdAsync(Id);
        }
        
        public Core.Bid CreateBid(double price, int bidOwnerId, int auctionId) {
            return base.Channel.CreateBid(price, bidOwnerId, auctionId);
        }
        
        public System.Threading.Tasks.Task<Core.Bid> CreateBidAsync(double price, int bidOwnerId, int auctionId) {
            return base.Channel.CreateBidAsync(price, bidOwnerId, auctionId);
        }
        
        public int AddBid(Core.Bid Bid) {
            return base.Channel.AddBid(Bid);
        }
        
        public System.Threading.Tasks.Task<int> AddBidAsync(Core.Bid Bid) {
            return base.Channel.AddBidAsync(Bid);
        }
        
        public Core.Bid[] GetAllBids() {
            return base.Channel.GetAllBids();
        }
        
        public System.Threading.Tasks.Task<Core.Bid[]> GetAllBidsAsync() {
            return base.Channel.GetAllBidsAsync();
        }
        
        public void RemoveBid(Core.Bid Bid) {
            base.Channel.RemoveBid(Bid);
        }
        
        public System.Threading.Tasks.Task RemoveBidAsync(Core.Bid Bid) {
            return base.Channel.RemoveBidAsync(Bid);
        }
        
        public int RemoveBidById(int Id) {
            return base.Channel.RemoveBidById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveBidByIdAsync(int Id) {
            return base.Channel.RemoveBidByIdAsync(Id);
        }
        
        public int UpdateBid(Core.Bid Bid) {
            return base.Channel.UpdateBid(Bid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateBidAsync(Core.Bid Bid) {
            return base.Channel.UpdateBidAsync(Bid);
        }
        
        public Core.Bid[] GetAllBidsByAccountId(int accountId) {
            return base.Channel.GetAllBidsByAccountId(accountId);
        }
        
        public System.Threading.Tasks.Task<Core.Bid[]> GetAllBidsByAccountIdAsync(int accountId) {
            return base.Channel.GetAllBidsByAccountIdAsync(accountId);
        }
        
        public Core.Bid[] GetAllBidsByAuctionId(int auctionId) {
            return base.Channel.GetAllBidsByAuctionId(auctionId);
        }
        
        public System.Threading.Tasks.Task<Core.Bid[]> GetAllBidsByAuctionIdAsync(int auctionId) {
            return base.Channel.GetAllBidsByAuctionIdAsync(auctionId);
        }
        
        public Core.Bid GetBidWithObjects(int Id) {
            return base.Channel.GetBidWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Bid> GetBidWithObjectsAsync(int Id) {
            return base.Channel.GetBidWithObjectsAsync(Id);
        }
        
        public Core.Product GetProductById(int Id) {
            return base.Channel.GetProductById(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Product> GetProductByIdAsync(int Id) {
            return base.Channel.GetProductByIdAsync(Id);
        }
        
        public Core.Product[] GetAllProductsInCategory(int CategoryId) {
            return base.Channel.GetAllProductsInCategory(CategoryId);
        }
        
        public System.Threading.Tasks.Task<Core.Product[]> GetAllProductsInCategoryAsync(int CategoryId) {
            return base.Channel.GetAllProductsInCategoryAsync(CategoryId);
        }
        
        public int AddProduct(Core.Product Product) {
            return base.Channel.AddProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(Core.Product Product) {
            return base.Channel.AddProductAsync(Product);
        }
        
        public Core.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<Core.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public void RemoveProduct(Core.Product Product) {
            base.Channel.RemoveProduct(Product);
        }
        
        public System.Threading.Tasks.Task RemoveProductAsync(Core.Product Product) {
            return base.Channel.RemoveProductAsync(Product);
        }
        
        public int RemoveProductById(int Id) {
            return base.Channel.RemoveProductById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveProductByIdAsync(int Id) {
            return base.Channel.RemoveProductByIdAsync(Id);
        }
        
        public int UpdateProduct(Core.Product Product) {
            return base.Channel.UpdateProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(Core.Product Product) {
            return base.Channel.UpdateProductAsync(Product);
        }
        
        public Core.Product[] FindProductsWithPriceMoreThan(double price) {
            return base.Channel.FindProductsWithPriceMoreThan(price);
        }
        
        public System.Threading.Tasks.Task<Core.Product[]> FindProductsWithPriceMoreThanAsync(double price) {
            return base.Channel.FindProductsWithPriceMoreThanAsync(price);
        }
        
        public Core.Product[] GetProductsWithName(string name) {
            return base.Channel.GetProductsWithName(name);
        }
        
        public System.Threading.Tasks.Task<Core.Product[]> GetProductsWithNameAsync(string name) {
            return base.Channel.GetProductsWithNameAsync(name);
        }
        
        public Core.Product[] GetProductsWithDescription(string description) {
            return base.Channel.GetProductsWithDescription(description);
        }
        
        public System.Threading.Tasks.Task<Core.Product[]> GetProductsWithDescriptionAsync(string description) {
            return base.Channel.GetProductsWithDescriptionAsync(description);
        }
        
        public Core.Product[] FindProductsWithPriceLessThan(double price) {
            return base.Channel.FindProductsWithPriceLessThan(price);
        }
        
        public System.Threading.Tasks.Task<Core.Product[]> FindProductsWithPriceLessThanAsync(double price) {
            return base.Channel.FindProductsWithPriceLessThanAsync(price);
        }
        
        public Core.Product GetProductWithObjects(int Id) {
            return base.Channel.GetProductWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<Core.Product> GetProductWithObjectsAsync(int Id) {
            return base.Channel.GetProductWithObjectsAsync(Id);
        }
    }
}
