//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuctionWebApplication.AuctionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Account", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Account : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SaltField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fname {
            get {
                return this.FnameField;
            }
            set {
                if ((object.ReferenceEquals(this.FnameField, value) != true)) {
                    this.FnameField = value;
                    this.RaisePropertyChanged("Fname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lname {
            get {
                return this.LnameField;
            }
            set {
                if ((object.ReferenceEquals(this.LnameField, value) != true)) {
                    this.LnameField = value;
                    this.RaisePropertyChanged("Lname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Salt {
            get {
                return this.SaltField;
            }
            set {
                if ((object.ReferenceEquals(this.SaltField, value) != true)) {
                    this.SaltField = value;
                    this.RaisePropertyChanged("Salt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Auction", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Auction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Bid[] BidsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CurrentHighestBidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrentOwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Product ProductField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Account SellerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Account WinnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Bid[] Bids {
            get {
                return this.BidsField;
            }
            set {
                if ((object.ReferenceEquals(this.BidsField, value) != true)) {
                    this.BidsField = value;
                    this.RaisePropertyChanged("Bids");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double CurrentHighestBid {
            get {
                return this.CurrentHighestBidField;
            }
            set {
                if ((this.CurrentHighestBidField.Equals(value) != true)) {
                    this.CurrentHighestBidField = value;
                    this.RaisePropertyChanged("CurrentHighestBid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrentOwnerName {
            get {
                return this.CurrentOwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentOwnerNameField, value) != true)) {
                    this.CurrentOwnerNameField = value;
                    this.RaisePropertyChanged("CurrentOwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Product Product {
            get {
                return this.ProductField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductField, value) != true)) {
                    this.ProductField = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Account Seller {
            get {
                return this.SellerField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerField, value) != true)) {
                    this.SellerField = value;
                    this.RaisePropertyChanged("Seller");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Account Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((object.ReferenceEquals(this.WinnerField, value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Category CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bid", Namespace="http://schemas.datacontract.org/2004/07/Core", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Bid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Auction AuctionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AuctionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Account BidOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BidOwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BidTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Auction Auction {
            get {
                return this.AuctionField;
            }
            set {
                if ((object.ReferenceEquals(this.AuctionField, value) != true)) {
                    this.AuctionField = value;
                    this.RaisePropertyChanged("Auction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AuctionId {
            get {
                return this.AuctionIdField;
            }
            set {
                if ((this.AuctionIdField.Equals(value) != true)) {
                    this.AuctionIdField = value;
                    this.RaisePropertyChanged("AuctionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Account BidOwner {
            get {
                return this.BidOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.BidOwnerField, value) != true)) {
                    this.BidOwnerField = value;
                    this.RaisePropertyChanged("BidOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BidOwnerId {
            get {
                return this.BidOwnerIdField;
            }
            set {
                if ((this.BidOwnerIdField.Equals(value) != true)) {
                    this.BidOwnerIdField = value;
                    this.RaisePropertyChanged("BidOwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BidTime {
            get {
                return this.BidTimeField;
            }
            set {
                if ((this.BidTimeField.Equals(value) != true)) {
                    this.BidTimeField = value;
                    this.RaisePropertyChanged("BidTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private AuctionWebApplication.AuctionService.Product[] ProductsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public AuctionWebApplication.AuctionService.Product[] Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AuctionService.IAuctionProjectService")]
    public interface IAuctionProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/LogError", ReplyAction="http://tempuri.org/IAuctionProjectService/LogErrorResponse")]
        void LogError(System.Exception e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/LogError", ReplyAction="http://tempuri.org/IAuctionProjectService/LogErrorResponse")]
        System.Threading.Tasks.Task LogErrorAsync(System.Exception e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByIdResponse")]
        AuctionWebApplication.AuctionService.Account GetAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/HashAndSaltPassword", ReplyAction="http://tempuri.org/IAuctionProjectService/HashAndSaltPasswordResponse")]
        AuctionWebApplication.AuctionService.Account HashAndSaltPassword(AuctionWebApplication.AuctionService.Account acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/HashAndSaltPassword", ReplyAction="http://tempuri.org/IAuctionProjectService/HashAndSaltPasswordResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> HashAndSaltPasswordAsync(AuctionWebApplication.AuctionService.Account acc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/Login", ReplyAction="http://tempuri.org/IAuctionProjectService/LoginResponse")]
        bool Login(AuctionWebApplication.AuctionService.Account acc, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/Login", ReplyAction="http://tempuri.org/IAuctionProjectService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(AuctionWebApplication.AuctionService.Account acc, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAccountResponse")]
        int AddAccount(AuctionWebApplication.AuctionService.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAccountResponse")]
        System.Threading.Tasks.Task<int> AddAccountAsync(AuctionWebApplication.AuctionService.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAccounts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAccountsResponse")]
        AuctionWebApplication.AuctionService.Account[] GetAllAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAccounts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAccountsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account[]> GetAllAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountResponse")]
        void RemoveAccount(AuctionWebApplication.AuctionService.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountResponse")]
        System.Threading.Tasks.Task RemoveAccountAsync(AuctionWebApplication.AuctionService.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountByIdResponse")]
        int RemoveAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAccountById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAccountByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAccountResponse")]
        int UpdateAccount(AuctionWebApplication.AuctionService.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAccount", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAccountResponse")]
        System.Threading.Tasks.Task<int> UpdateAccountAsync(AuctionWebApplication.AuctionService.Account Account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByUsername", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByUsernameResponse")]
        AuctionWebApplication.AuctionService.Account GetAccountByUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByUsername", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByUsernameResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountByUsernameAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByEmail", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByEmailResponse")]
        AuctionWebApplication.AuctionService.Account GetAccountByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountByEmail", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountByEmailResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountWithObjectsResponse")]
        AuctionWebApplication.AuctionService.Account GetAccountWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAccountWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAccountWithObjectsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdResponse")]
        AuctionWebApplication.AuctionService.Auction GetAuctionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction> GetAuctionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAuctionResponse")]
        int AddAuction(AuctionWebApplication.AuctionService.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/AddAuctionResponse")]
        System.Threading.Tasks.Task<int> AddAuctionAsync(AuctionWebApplication.AuctionService.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAllAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjectsResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAllAuctionsWithObjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsWithObjectsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsWithObjectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllActiveAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllActiveAuctionsResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAllActiveAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllActiveAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllActiveAuctionsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllActiveAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsAsyncable", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsAsyncableResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAllAuctionsAsyncable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsAsyncable", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsAsyncableResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsAsyncableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionResponse")]
        void RemoveAuction(AuctionWebApplication.AuctionService.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionResponse")]
        System.Threading.Tasks.Task RemoveAuctionAsync(AuctionWebApplication.AuctionService.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionByIdResponse")]
        int RemoveAuctionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveAuctionById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveAuctionByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveAuctionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/CheckIfActive", ReplyAction="http://tempuri.org/IAuctionProjectService/CheckIfActiveResponse")]
        bool CheckIfActive(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/CheckIfActive", ReplyAction="http://tempuri.org/IAuctionProjectService/CheckIfActiveResponse")]
        System.Threading.Tasks.Task<bool> CheckIfActiveAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAuctionResponse")]
        int UpdateAuction(AuctionWebApplication.AuctionService.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateAuctionResponse")]
        System.Threading.Tasks.Task<int> UpdateAuctionAsync(AuctionWebApplication.AuctionService.Auction Auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductIdResponse")]
        AuctionWebApplication.AuctionService.Auction GetAuctionWithProductId(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionWithProductIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction> GetAuctionWithProductIdAsync(int productId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/getAllAucionsForProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/getAllAucionsForProductsResponse")]
        AuctionWebApplication.AuctionService.Auction[] getAllAucionsForProducts(AuctionWebApplication.AuctionService.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/getAllAucionsForProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/getAllAucionsForProductsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> getAllAucionsForProductsAsync(AuctionWebApplication.AuctionService.Product[] products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerIdResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAuctionsWhereSellerId(int sellerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereSellerIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAuctionsWhereSellerIdAsync(int sellerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerIdResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAuctionsWhereWinnerId(int winnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWhereWinnerIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAuctionsWhereWinnerIdAsync(int winnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeft", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeftResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAuctionsWithLessTimeLeft();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeft", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionsWithLessTimeLeftResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAuctionsWithLessTimeLeftAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctionsResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetMostRecentAuctions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctions", ReplyAction="http://tempuri.org/IAuctionProjectService/GetMostRecentAuctionsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetMostRecentAuctionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjectsResponse")]
        AuctionWebApplication.AuctionService.Auction GetAuctionByIdWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAuctionByIdWithObjectsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction> GetAuctionByIdWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategorytById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategorytByIdResponse")]
        AuctionWebApplication.AuctionService.Category GetCategorytById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategorytById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategorytByIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category> GetCategorytByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/AddCategoryResponse")]
        int AddCategory(AuctionWebApplication.AuctionService.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/AddCategoryResponse")]
        System.Threading.Tasks.Task<int> AddCategoryAsync(AuctionWebApplication.AuctionService.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllCategories", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllCategoriesResponse")]
        AuctionWebApplication.AuctionService.Category[] GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllCategories", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category[]> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryResponse")]
        void RemoveCategory(AuctionWebApplication.AuctionService.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryResponse")]
        System.Threading.Tasks.Task RemoveCategoryAsync(AuctionWebApplication.AuctionService.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByIdResponse")]
        int RemoveCategoryById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveCategoryByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateCategoryResponse")]
        int UpdateCategory(AuctionWebApplication.AuctionService.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(AuctionWebApplication.AuctionService.Category Category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryByNameResponse")]
        AuctionWebApplication.AuctionService.Category GetCategoryByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryByNameResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category> GetCategoryByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByNameResponse")]
        int RemoveCategoryByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveCategoryByName", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveCategoryByNameResponse")]
        System.Threading.Tasks.Task<int> RemoveCategoryByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjectsResponse")]
        AuctionWebApplication.AuctionService.Category GetCategoryWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetCategoryWithObjectsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category> GetCategoryWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidByIdResponse")]
        AuctionWebApplication.AuctionService.Bid GetBidById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidByIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/CreateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/CreateBidResponse")]
        AuctionWebApplication.AuctionService.Bid CreateBid(double price, AuctionWebApplication.AuctionService.Account bidOwner, int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/CreateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/CreateBidResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> CreateBidAsync(double price, AuctionWebApplication.AuctionService.Account bidOwner, int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddBid", ReplyAction="http://tempuri.org/IAuctionProjectService/AddBidResponse")]
        int AddBid(AuctionWebApplication.AuctionService.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddBid", ReplyAction="http://tempuri.org/IAuctionProjectService/AddBidResponse")]
        System.Threading.Tasks.Task<int> AddBidAsync(AuctionWebApplication.AuctionService.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBids", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsResponse")]
        AuctionWebApplication.AuctionService.Bid[] GetAllBids();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBids", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid[]> GetAllBidsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsForBids", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsForBidsResponse")]
        AuctionWebApplication.AuctionService.Auction[] GetAllAuctionsForBids(AuctionWebApplication.AuctionService.Bid[] bids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllAuctionsForBids", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllAuctionsForBidsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsForBidsAsync(AuctionWebApplication.AuctionService.Bid[] bids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBid", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidResponse")]
        void RemoveBid(AuctionWebApplication.AuctionService.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBid", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidResponse")]
        System.Threading.Tasks.Task RemoveBidAsync(AuctionWebApplication.AuctionService.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidByIdResponse")]
        int RemoveBidById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveBidById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveBidByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveBidByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateBidResponse")]
        int UpdateBid(AuctionWebApplication.AuctionService.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateBid", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateBidResponse")]
        System.Threading.Tasks.Task<int> UpdateBidAsync(AuctionWebApplication.AuctionService.Bid Bid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountIdResponse")]
        AuctionWebApplication.AuctionService.Bid[] GetAllBidsByAccountId(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAccountIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid[]> GetAllBidsByAccountIdAsync(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionIdResponse")]
        AuctionWebApplication.AuctionService.Bid[] GetAllBidsByAuctionId(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllBidsByAuctionIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid[]> GetAllBidsByAuctionIdAsync(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidForAuctionWherePrice", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidForAuctionWherePriceResponse")]
        AuctionWebApplication.AuctionService.Bid GetBidForAuctionWherePrice(double price, AuctionWebApplication.AuctionService.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidForAuctionWherePrice", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidForAuctionWherePriceResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidForAuctionWherePriceAsync(double price, AuctionWebApplication.AuctionService.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetHighestPriceForAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/GetHighestPriceForAuctionResponse")]
        double GetHighestPriceForAuction(AuctionWebApplication.AuctionService.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetHighestPriceForAuction", ReplyAction="http://tempuri.org/IAuctionProjectService/GetHighestPriceForAuctionResponse")]
        System.Threading.Tasks.Task<double> GetHighestPriceForAuctionAsync(AuctionWebApplication.AuctionService.Auction auction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsResponse")]
        AuctionWebApplication.AuctionService.Bid GetBidWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidWithObjectsAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAuctionId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAuctionIdResponse")]
        AuctionWebApplication.AuctionService.Bid GetBidWithObjectsWithAuctionId(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAuctionId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAuctionIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidWithObjectsWithAuctionIdAsync(int auctionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAccountId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAccountIdResponse")]
        AuctionWebApplication.AuctionService.Bid GetBidWithObjectsWithAccountId(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAccountId", ReplyAction="http://tempuri.org/IAuctionProjectService/GetBidWithObjectsWithAccountIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidWithObjectsWithAccountIdAsync(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductByIdResponse")]
        AuctionWebApplication.AuctionService.Product GetProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductByIdResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product> GetProductByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategoryResponse")]
        AuctionWebApplication.AuctionService.Product[] GetAllProductsInCategory(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategory", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsInCategoryResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetAllProductsInCategoryAsync(int CategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/AddProductResponse")]
        int AddProduct(AuctionWebApplication.AuctionService.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/AddProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/AddProductResponse")]
        System.Threading.Tasks.Task<int> AddProductAsync(AuctionWebApplication.AuctionService.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsResponse")]
        AuctionWebApplication.AuctionService.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetAllProducts", ReplyAction="http://tempuri.org/IAuctionProjectService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductResponse")]
        void RemoveProduct(AuctionWebApplication.AuctionService.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductResponse")]
        System.Threading.Tasks.Task RemoveProductAsync(AuctionWebApplication.AuctionService.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductByIdResponse")]
        int RemoveProductById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/RemoveProductById", ReplyAction="http://tempuri.org/IAuctionProjectService/RemoveProductByIdResponse")]
        System.Threading.Tasks.Task<int> RemoveProductByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateProductResponse")]
        int UpdateProduct(AuctionWebApplication.AuctionService.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/UpdateProduct", ReplyAction="http://tempuri.org/IAuctionProjectService/UpdateProductResponse")]
        System.Threading.Tasks.Task<int> UpdateProductAsync(AuctionWebApplication.AuctionService.Product Product);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThanResponse")]
        AuctionWebApplication.AuctionService.Product[] FindProductsWithPriceMoreThan(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceMoreThanResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> FindProductsWithPriceMoreThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithNameResponse")]
        AuctionWebApplication.AuctionService.Product[] GetProductsWithName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithName", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithNameResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetProductsWithNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithDescription", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithDescriptionResponse")]
        AuctionWebApplication.AuctionService.Product[] GetProductsWithDescription(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductsWithDescription", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductsWithDescriptionResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetProductsWithDescriptionAsync(string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThanResponse")]
        AuctionWebApplication.AuctionService.Product[] FindProductsWithPriceLessThan(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThan", ReplyAction="http://tempuri.org/IAuctionProjectService/FindProductsWithPriceLessThanResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> FindProductsWithPriceLessThanAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductWithObjectsResponse")]
        AuctionWebApplication.AuctionService.Product GetProductWithObjects(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuctionProjectService/GetProductWithObjects", ReplyAction="http://tempuri.org/IAuctionProjectService/GetProductWithObjectsResponse")]
        System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product> GetProductWithObjectsAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuctionProjectServiceChannel : AuctionWebApplication.AuctionService.IAuctionProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuctionProjectServiceClient : System.ServiceModel.ClientBase<AuctionWebApplication.AuctionService.IAuctionProjectService>, AuctionWebApplication.AuctionService.IAuctionProjectService {
        
        public AuctionProjectServiceClient() {
        }
        
        public AuctionProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuctionProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuctionProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LogError(System.Exception e) {
            base.Channel.LogError(e);
        }
        
        public System.Threading.Tasks.Task LogErrorAsync(System.Exception e) {
            return base.Channel.LogErrorAsync(e);
        }
        
        public AuctionWebApplication.AuctionService.Account GetAccountById(int Id) {
            return base.Channel.GetAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountByIdAsync(int Id) {
            return base.Channel.GetAccountByIdAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Account HashAndSaltPassword(AuctionWebApplication.AuctionService.Account acc) {
            return base.Channel.HashAndSaltPassword(acc);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> HashAndSaltPasswordAsync(AuctionWebApplication.AuctionService.Account acc) {
            return base.Channel.HashAndSaltPasswordAsync(acc);
        }
        
        public bool Login(AuctionWebApplication.AuctionService.Account acc, string password) {
            return base.Channel.Login(acc, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(AuctionWebApplication.AuctionService.Account acc, string password) {
            return base.Channel.LoginAsync(acc, password);
        }
        
        public int AddAccount(AuctionWebApplication.AuctionService.Account Account) {
            return base.Channel.AddAccount(Account);
        }
        
        public System.Threading.Tasks.Task<int> AddAccountAsync(AuctionWebApplication.AuctionService.Account Account) {
            return base.Channel.AddAccountAsync(Account);
        }
        
        public AuctionWebApplication.AuctionService.Account[] GetAllAccounts() {
            return base.Channel.GetAllAccounts();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account[]> GetAllAccountsAsync() {
            return base.Channel.GetAllAccountsAsync();
        }
        
        public void RemoveAccount(AuctionWebApplication.AuctionService.Account Account) {
            base.Channel.RemoveAccount(Account);
        }
        
        public System.Threading.Tasks.Task RemoveAccountAsync(AuctionWebApplication.AuctionService.Account Account) {
            return base.Channel.RemoveAccountAsync(Account);
        }
        
        public int RemoveAccountById(int Id) {
            return base.Channel.RemoveAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAccountByIdAsync(int Id) {
            return base.Channel.RemoveAccountByIdAsync(Id);
        }
        
        public int UpdateAccount(AuctionWebApplication.AuctionService.Account Account) {
            return base.Channel.UpdateAccount(Account);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAccountAsync(AuctionWebApplication.AuctionService.Account Account) {
            return base.Channel.UpdateAccountAsync(Account);
        }
        
        public AuctionWebApplication.AuctionService.Account GetAccountByUsername(string username) {
            return base.Channel.GetAccountByUsername(username);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountByUsernameAsync(string username) {
            return base.Channel.GetAccountByUsernameAsync(username);
        }
        
        public AuctionWebApplication.AuctionService.Account GetAccountByEmail(string email) {
            return base.Channel.GetAccountByEmail(email);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountByEmailAsync(string email) {
            return base.Channel.GetAccountByEmailAsync(email);
        }
        
        public AuctionWebApplication.AuctionService.Account GetAccountWithObjects(int Id) {
            return base.Channel.GetAccountWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Account> GetAccountWithObjectsAsync(int Id) {
            return base.Channel.GetAccountWithObjectsAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Auction GetAuctionById(int Id) {
            return base.Channel.GetAuctionById(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction> GetAuctionByIdAsync(int Id) {
            return base.Channel.GetAuctionByIdAsync(Id);
        }
        
        public int AddAuction(AuctionWebApplication.AuctionService.Auction Auction) {
            return base.Channel.AddAuction(Auction);
        }
        
        public System.Threading.Tasks.Task<int> AddAuctionAsync(AuctionWebApplication.AuctionService.Auction Auction) {
            return base.Channel.AddAuctionAsync(Auction);
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAllAuctions() {
            return base.Channel.GetAllAuctions();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsAsync() {
            return base.Channel.GetAllAuctionsAsync();
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAllAuctionsWithObjects() {
            return base.Channel.GetAllAuctionsWithObjects();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsWithObjectsAsync() {
            return base.Channel.GetAllAuctionsWithObjectsAsync();
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAllActiveAuctions() {
            return base.Channel.GetAllActiveAuctions();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllActiveAuctionsAsync() {
            return base.Channel.GetAllActiveAuctionsAsync();
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAllAuctionsAsyncable() {
            return base.Channel.GetAllAuctionsAsyncable();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsAsyncableAsync() {
            return base.Channel.GetAllAuctionsAsyncableAsync();
        }
        
        public void RemoveAuction(AuctionWebApplication.AuctionService.Auction Auction) {
            base.Channel.RemoveAuction(Auction);
        }
        
        public System.Threading.Tasks.Task RemoveAuctionAsync(AuctionWebApplication.AuctionService.Auction Auction) {
            return base.Channel.RemoveAuctionAsync(Auction);
        }
        
        public int RemoveAuctionById(int Id) {
            return base.Channel.RemoveAuctionById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveAuctionByIdAsync(int Id) {
            return base.Channel.RemoveAuctionByIdAsync(Id);
        }
        
        public bool CheckIfActive(int Id) {
            return base.Channel.CheckIfActive(Id);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfActiveAsync(int Id) {
            return base.Channel.CheckIfActiveAsync(Id);
        }
        
        public int UpdateAuction(AuctionWebApplication.AuctionService.Auction Auction) {
            return base.Channel.UpdateAuction(Auction);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAuctionAsync(AuctionWebApplication.AuctionService.Auction Auction) {
            return base.Channel.UpdateAuctionAsync(Auction);
        }
        
        public AuctionWebApplication.AuctionService.Auction GetAuctionWithProductId(int productId) {
            return base.Channel.GetAuctionWithProductId(productId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction> GetAuctionWithProductIdAsync(int productId) {
            return base.Channel.GetAuctionWithProductIdAsync(productId);
        }
        
        public AuctionWebApplication.AuctionService.Auction[] getAllAucionsForProducts(AuctionWebApplication.AuctionService.Product[] products) {
            return base.Channel.getAllAucionsForProducts(products);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> getAllAucionsForProductsAsync(AuctionWebApplication.AuctionService.Product[] products) {
            return base.Channel.getAllAucionsForProductsAsync(products);
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAuctionsWhereSellerId(int sellerId) {
            return base.Channel.GetAuctionsWhereSellerId(sellerId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAuctionsWhereSellerIdAsync(int sellerId) {
            return base.Channel.GetAuctionsWhereSellerIdAsync(sellerId);
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAuctionsWhereWinnerId(int winnerId) {
            return base.Channel.GetAuctionsWhereWinnerId(winnerId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAuctionsWhereWinnerIdAsync(int winnerId) {
            return base.Channel.GetAuctionsWhereWinnerIdAsync(winnerId);
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAuctionsWithLessTimeLeft() {
            return base.Channel.GetAuctionsWithLessTimeLeft();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAuctionsWithLessTimeLeftAsync() {
            return base.Channel.GetAuctionsWithLessTimeLeftAsync();
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetMostRecentAuctions() {
            return base.Channel.GetMostRecentAuctions();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetMostRecentAuctionsAsync() {
            return base.Channel.GetMostRecentAuctionsAsync();
        }
        
        public AuctionWebApplication.AuctionService.Auction GetAuctionByIdWithObjects(int Id) {
            return base.Channel.GetAuctionByIdWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction> GetAuctionByIdWithObjectsAsync(int Id) {
            return base.Channel.GetAuctionByIdWithObjectsAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Category GetCategorytById(int Id) {
            return base.Channel.GetCategorytById(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category> GetCategorytByIdAsync(int Id) {
            return base.Channel.GetCategorytByIdAsync(Id);
        }
        
        public int AddCategory(AuctionWebApplication.AuctionService.Category Category) {
            return base.Channel.AddCategory(Category);
        }
        
        public System.Threading.Tasks.Task<int> AddCategoryAsync(AuctionWebApplication.AuctionService.Category Category) {
            return base.Channel.AddCategoryAsync(Category);
        }
        
        public AuctionWebApplication.AuctionService.Category[] GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category[]> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public void RemoveCategory(AuctionWebApplication.AuctionService.Category Category) {
            base.Channel.RemoveCategory(Category);
        }
        
        public System.Threading.Tasks.Task RemoveCategoryAsync(AuctionWebApplication.AuctionService.Category Category) {
            return base.Channel.RemoveCategoryAsync(Category);
        }
        
        public int RemoveCategoryById(int Id) {
            return base.Channel.RemoveCategoryById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCategoryByIdAsync(int Id) {
            return base.Channel.RemoveCategoryByIdAsync(Id);
        }
        
        public int UpdateCategory(AuctionWebApplication.AuctionService.Category Category) {
            return base.Channel.UpdateCategory(Category);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(AuctionWebApplication.AuctionService.Category Category) {
            return base.Channel.UpdateCategoryAsync(Category);
        }
        
        public AuctionWebApplication.AuctionService.Category GetCategoryByName(string name) {
            return base.Channel.GetCategoryByName(name);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category> GetCategoryByNameAsync(string name) {
            return base.Channel.GetCategoryByNameAsync(name);
        }
        
        public int RemoveCategoryByName(string name) {
            return base.Channel.RemoveCategoryByName(name);
        }
        
        public System.Threading.Tasks.Task<int> RemoveCategoryByNameAsync(string name) {
            return base.Channel.RemoveCategoryByNameAsync(name);
        }
        
        public AuctionWebApplication.AuctionService.Category GetCategoryWithObjects(int Id) {
            return base.Channel.GetCategoryWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Category> GetCategoryWithObjectsAsync(int Id) {
            return base.Channel.GetCategoryWithObjectsAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Bid GetBidById(int Id) {
            return base.Channel.GetBidById(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidByIdAsync(int Id) {
            return base.Channel.GetBidByIdAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Bid CreateBid(double price, AuctionWebApplication.AuctionService.Account bidOwner, int auctionId) {
            return base.Channel.CreateBid(price, bidOwner, auctionId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> CreateBidAsync(double price, AuctionWebApplication.AuctionService.Account bidOwner, int auctionId) {
            return base.Channel.CreateBidAsync(price, bidOwner, auctionId);
        }
        
        public int AddBid(AuctionWebApplication.AuctionService.Bid Bid) {
            return base.Channel.AddBid(Bid);
        }
        
        public System.Threading.Tasks.Task<int> AddBidAsync(AuctionWebApplication.AuctionService.Bid Bid) {
            return base.Channel.AddBidAsync(Bid);
        }
        
        public AuctionWebApplication.AuctionService.Bid[] GetAllBids() {
            return base.Channel.GetAllBids();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid[]> GetAllBidsAsync() {
            return base.Channel.GetAllBidsAsync();
        }
        
        public AuctionWebApplication.AuctionService.Auction[] GetAllAuctionsForBids(AuctionWebApplication.AuctionService.Bid[] bids) {
            return base.Channel.GetAllAuctionsForBids(bids);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Auction[]> GetAllAuctionsForBidsAsync(AuctionWebApplication.AuctionService.Bid[] bids) {
            return base.Channel.GetAllAuctionsForBidsAsync(bids);
        }
        
        public void RemoveBid(AuctionWebApplication.AuctionService.Bid Bid) {
            base.Channel.RemoveBid(Bid);
        }
        
        public System.Threading.Tasks.Task RemoveBidAsync(AuctionWebApplication.AuctionService.Bid Bid) {
            return base.Channel.RemoveBidAsync(Bid);
        }
        
        public int RemoveBidById(int Id) {
            return base.Channel.RemoveBidById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveBidByIdAsync(int Id) {
            return base.Channel.RemoveBidByIdAsync(Id);
        }
        
        public int UpdateBid(AuctionWebApplication.AuctionService.Bid Bid) {
            return base.Channel.UpdateBid(Bid);
        }
        
        public System.Threading.Tasks.Task<int> UpdateBidAsync(AuctionWebApplication.AuctionService.Bid Bid) {
            return base.Channel.UpdateBidAsync(Bid);
        }
        
        public AuctionWebApplication.AuctionService.Bid[] GetAllBidsByAccountId(int accountId) {
            return base.Channel.GetAllBidsByAccountId(accountId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid[]> GetAllBidsByAccountIdAsync(int accountId) {
            return base.Channel.GetAllBidsByAccountIdAsync(accountId);
        }
        
        public AuctionWebApplication.AuctionService.Bid[] GetAllBidsByAuctionId(int auctionId) {
            return base.Channel.GetAllBidsByAuctionId(auctionId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid[]> GetAllBidsByAuctionIdAsync(int auctionId) {
            return base.Channel.GetAllBidsByAuctionIdAsync(auctionId);
        }
        
        public AuctionWebApplication.AuctionService.Bid GetBidForAuctionWherePrice(double price, AuctionWebApplication.AuctionService.Auction auction) {
            return base.Channel.GetBidForAuctionWherePrice(price, auction);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidForAuctionWherePriceAsync(double price, AuctionWebApplication.AuctionService.Auction auction) {
            return base.Channel.GetBidForAuctionWherePriceAsync(price, auction);
        }
        
        public double GetHighestPriceForAuction(AuctionWebApplication.AuctionService.Auction auction) {
            return base.Channel.GetHighestPriceForAuction(auction);
        }
        
        public System.Threading.Tasks.Task<double> GetHighestPriceForAuctionAsync(AuctionWebApplication.AuctionService.Auction auction) {
            return base.Channel.GetHighestPriceForAuctionAsync(auction);
        }
        
        public AuctionWebApplication.AuctionService.Bid GetBidWithObjects(int Id) {
            return base.Channel.GetBidWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidWithObjectsAsync(int Id) {
            return base.Channel.GetBidWithObjectsAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Bid GetBidWithObjectsWithAuctionId(int auctionId) {
            return base.Channel.GetBidWithObjectsWithAuctionId(auctionId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidWithObjectsWithAuctionIdAsync(int auctionId) {
            return base.Channel.GetBidWithObjectsWithAuctionIdAsync(auctionId);
        }
        
        public AuctionWebApplication.AuctionService.Bid GetBidWithObjectsWithAccountId(int accountId) {
            return base.Channel.GetBidWithObjectsWithAccountId(accountId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Bid> GetBidWithObjectsWithAccountIdAsync(int accountId) {
            return base.Channel.GetBidWithObjectsWithAccountIdAsync(accountId);
        }
        
        public AuctionWebApplication.AuctionService.Product GetProductById(int Id) {
            return base.Channel.GetProductById(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product> GetProductByIdAsync(int Id) {
            return base.Channel.GetProductByIdAsync(Id);
        }
        
        public AuctionWebApplication.AuctionService.Product[] GetAllProductsInCategory(int CategoryId) {
            return base.Channel.GetAllProductsInCategory(CategoryId);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetAllProductsInCategoryAsync(int CategoryId) {
            return base.Channel.GetAllProductsInCategoryAsync(CategoryId);
        }
        
        public int AddProduct(AuctionWebApplication.AuctionService.Product Product) {
            return base.Channel.AddProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> AddProductAsync(AuctionWebApplication.AuctionService.Product Product) {
            return base.Channel.AddProductAsync(Product);
        }
        
        public AuctionWebApplication.AuctionService.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public void RemoveProduct(AuctionWebApplication.AuctionService.Product Product) {
            base.Channel.RemoveProduct(Product);
        }
        
        public System.Threading.Tasks.Task RemoveProductAsync(AuctionWebApplication.AuctionService.Product Product) {
            return base.Channel.RemoveProductAsync(Product);
        }
        
        public int RemoveProductById(int Id) {
            return base.Channel.RemoveProductById(Id);
        }
        
        public System.Threading.Tasks.Task<int> RemoveProductByIdAsync(int Id) {
            return base.Channel.RemoveProductByIdAsync(Id);
        }
        
        public int UpdateProduct(AuctionWebApplication.AuctionService.Product Product) {
            return base.Channel.UpdateProduct(Product);
        }
        
        public System.Threading.Tasks.Task<int> UpdateProductAsync(AuctionWebApplication.AuctionService.Product Product) {
            return base.Channel.UpdateProductAsync(Product);
        }
        
        public AuctionWebApplication.AuctionService.Product[] FindProductsWithPriceMoreThan(double price) {
            return base.Channel.FindProductsWithPriceMoreThan(price);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> FindProductsWithPriceMoreThanAsync(double price) {
            return base.Channel.FindProductsWithPriceMoreThanAsync(price);
        }
        
        public AuctionWebApplication.AuctionService.Product[] GetProductsWithName(string name) {
            return base.Channel.GetProductsWithName(name);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetProductsWithNameAsync(string name) {
            return base.Channel.GetProductsWithNameAsync(name);
        }
        
        public AuctionWebApplication.AuctionService.Product[] GetProductsWithDescription(string description) {
            return base.Channel.GetProductsWithDescription(description);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> GetProductsWithDescriptionAsync(string description) {
            return base.Channel.GetProductsWithDescriptionAsync(description);
        }
        
        public AuctionWebApplication.AuctionService.Product[] FindProductsWithPriceLessThan(double price) {
            return base.Channel.FindProductsWithPriceLessThan(price);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product[]> FindProductsWithPriceLessThanAsync(double price) {
            return base.Channel.FindProductsWithPriceLessThanAsync(price);
        }
        
        public AuctionWebApplication.AuctionService.Product GetProductWithObjects(int Id) {
            return base.Channel.GetProductWithObjects(Id);
        }
        
        public System.Threading.Tasks.Task<AuctionWebApplication.AuctionService.Product> GetProductWithObjectsAsync(int Id) {
            return base.Channel.GetProductWithObjectsAsync(Id);
        }
    }
}
